input {
    #### PING FED INPUTS
    tcp {
        id => "pf_system_in"
        port => 20513
        add_field => {"log_type" => "PF_System_Log"}
    }

    tcp {
        id => "pf_audit_in"
        port => 20514
        add_field => {"log_type" => "PF_Audit_Log"}
    }
    
    #### PING DIRECTORY INPUTS
    syslog {
        id => "pd_directory_in"
        port => 20515
        type => syslog
        add_field => {"log_type" => "PD_Access_Log"}
        codec => multiline {
            pattern => "^\s"
            what => "previous"
        }
    }

    #### PING ACCESS INPUTS
    tcp {
        id => "pa_system_in"
        port => 20516
        add_field => {"log_type" => "PA_System_Log"}
    }

    tcp {
        id => "pa_audit_in"
        port => 20517
        add_field => {"log_type" => "PA_Audit_Log"}
    }


}

filter{
    #PROCESS PING FED AUDIT LOG
    #Log4J Pattern Matching from PF and extraction of JSON DATA from the MSG
    if([log_type] == "PF_Audit_Log"){
        grok { 
            match => { 
                "message" => [ 
                    "\A%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:event_timestamp}%{SPACE}%{SYSLOGPROG} , %{GREEDYDATA:json_data}",
                    "\A%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:event_timestamp}%{SPACE}%{SYSLOGPROG}%{SPACE}%{GREEDYDATA:json_data}"
                    ]
            }
        } 
        #Convert the injested data into Individual Fields for elasticsearch
        json {
            source => "json_data"
        }

        if([json_data]){
            #Drop the original as you do not need it at this point.
            mutate {
                remove_field => "[json_data]"
            }

            geoip {
                source => "ip"
            }

            #Security Enrichments begin here, ENRICH THE IP ADDRESS DETAIL
            translate {
                field => "ip"
                destination => "threat_intel"
                fallback => "No"
                dictionary_path => '/etc/logstash/enrichment/AlienVaultIP.yml'
                refresh_behaviour => "replace"
            }

            translate {
                field => "ip"
                destination => "tor_intel"
                fallback => "No"
                dictionary_path => '/etc/logstash/enrichment/TorNodes.yml'
                refresh_behaviour => "replace"
            }

            translate {
                field => "[geoip][country_name]"
                destination => "malicious_country"
                fallback => "No"
                dictionary_path => '/etc/logstash/enrichment/MaliciousCountries.yml'
                refresh_behaviour => "replace"
            }

            translate {
                field => "[geoip][country_name]"
                destination => "known_country"
                fallback => "No"
                dictionary_path => '/etc/logstash/enrichment/KnownCountries.yml'
                refresh_behaviour => "replace"
            }

            if([malicious_country] == "No" and [known_country] == "No"){
                mutate {
                    add_field => { "suspicious_country" => "YES" }
                }
            }

            #Query for previous logins in Elasticsearch, if login is found append data to the log
            #IF A SUCCESSFUL LOGIN OCCURS, Query ES to see if the the attempt was successful in the past to determine distance from previous login.

            if([status] == "success" and [event] == "AUTHN_ATTEMPT"){
                elasticsearch {
                    index => "pf-audit*"
                    query_template => "/etc/logstash/templates/6hr-1200km-template.json"
                    ca_file => "/usr/share/elasticsearch/config/certificates/ca/ca.crt"
                    hosts => ["https://es01:9200","https://es02:9200"]

                    add_field => {"found_distance_alert" => "YES"}

                    fields => {
                        "subject" => "found_subject"
                        "ip" => "found_ip"
                        "[geoip][country_name]" => "found_country"
                        "[geoip][city_name]" => "found_city_name"
                        "[geoip][location][lat]" => "[found_geoip][location][lat]"
                        "[geoip][location][lon]" => "[found_geoip][location][lon]"
                    }
                    user => elastic
                    password => "${ELASTIC_PASSWORD}"
                }
            }
        }
    }

    # PROCESS PING FED SYSTEM LOG
    # USING LOG4J's ability to output in JSON limits the amount of processing you have to do besides splitting up JSON.

    if([log_type] == "PF_System_Log"){
        grok { 
            match => { 
                "message" => [ 
                    "\A%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:event_timestamp}%{SPACE}%{SYSLOGPROG} , %{GREEDYDATA:json_data}",
                    "\A%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:event_timestamp}%{SPACE}%{SYSLOGPROG}%{SPACE}%{GREEDYDATA:json_data}"
                    ]
            }
        } 
        json {
            source => "json_data"
        }

        if([json_data]){
            mutate {
                remove_field => "[json_data]"
            }
        }   
    }

    # PROCESS PING DIRECTORY LOGS
    # LOGS ARE SENT IN A CUSTOM FORMAT, AND THIS CONFIG MATCHES AND PARSES THEM.

    if([log_type] == "PD_Access_Log"){
        kv {
            source => "[message]"
            value_split => "="
        }

        grok {
            match => { "message" => "\A%{WORD:ldapType} %{GREEDYDATA}" }
        }

        mutate{
            gsub => [ 
                "filter", '"', ""
            ]
            gsub => [ 
                "dn", '"', ""
            ]
        }

        geoip {
            source => "requesterIP"
        }

        translate {
            field => "requesterIP"
            destination => "threat_intel"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/AlienVaultIP.yml'
            refresh_behaviour => "replace"
        }

        translate {
            field => "requesterIP"
            destination => "tor_intel"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/TorNodes.yml'
            refresh_behaviour => "replace"
        }

        translate {
            field => "[geoip][country_name]"
            destination => "malicious_country"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/MaliciousCountries.yml'
            refresh_behaviour => "replace"
        }

        translate {
            field => "[geoip][country_name]"
            destination => "known_country"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/KnownCountries.yml'
            refresh_behaviour => "replace"
        }

        if([malicious_country] == "No" and [known_country] == "No"){
            mutate {
                add_field => { "suspicious_country" => "YES" }
            }
        }

        mutate {
            remove_field => "[message]"
            remove_field => "[tags]"
        }
    }

    # PROCESS PING ACCESS AUDIT LOG
    # PING ACCESS IS SENDING IN LOG4J FORMAT (JSON), SO PARSING IS MUCH LIKE PING FED.

    if([log_type] == "PA_Audit_Log"){
        grok { 
            match => { 
                "message" => [ 
                    "\A%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:event_timestamp}%{SPACE}%{SYSLOGPROG} , %{GREEDYDATA:json_data}",
                    "\A%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:event_timestamp}%{SPACE}%{SYSLOGPROG}%{SPACE}%{GREEDYDATA:json_data}"
                    ]
            }
        } 
        json {
            source => "json_data"
        }

        if([json_data]){
            mutate {
                remove_field => "[json_data]"
            }
            geoip {
                source => "client"
            }

            translate {
                field => "client"
                destination => "threat_intel"
                fallback => "No"
                dictionary_path => '/etc/logstash/enrichment/AlienVaultIP.yml'
                refresh_behaviour => "replace"
            }

            translate {
                field => "client"
                destination => "tor_intel"
                fallback => "No"
                dictionary_path => '/etc/logstash/enrichment/TorNodes.yml'
                refresh_behaviour => "replace"
            }

            translate {
                field => "[geoip][country_name]"
                destination => "malicious_country"
                fallback => "No"
                dictionary_path => '/etc/logstash/enrichment/MaliciousCountries.yml'
                refresh_behaviour => "replace"
            }

            translate {
                field => "[geoip][country_name]"
                destination => "known_country"
                fallback => "No"
                dictionary_path => '/etc/logstash/enrichment/KnownCountries.yml'
                refresh_behaviour => "replace"
            }

            if([malicious_country] == "No" and [known_country] == "No"){
                mutate {
                    add_field => { "suspicious_country" => "YES" }
                }
            }
        }
    }

    if([log_type] == "PA_System_Log"){
        grok { 
            match => { 
                "message" => [ 
                    "\A%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:event_timestamp}%{SPACE}%{SYSLOGPROG} , %{GREEDYDATA:json_data}",
                    "\A%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:event_timestamp}%{SPACE}%{SYSLOGPROG}%{SPACE}%{GREEDYDATA:json_data}"
                    ]
            }
        } 
        json {
            source => "json_data"
        }
    }
}

output{
    #EACH LOG TYPE IS WRITTEN TO ELASTIC SEARCH INTO CUSTOM INDEXES FOR EACH LOG

    if([log_type] == "PF_Audit_Log"){
        elasticsearch {
            id => "audit_out"
            ssl => true
            ssl_certificate_verification => true
            cacert => "${CERTS_DIR}/ca/ca.crt"
            hosts => ["https://es01:9200","https://es02:9200"]
            ilm_enabled => true
            ilm_rollover_alias => "pf-audit"
            ilm_policy => "ping-2-day-retention"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
    if([log_type] == "PD_Access_Log"){
        elasticsearch {
            id => "pd_out"
            ssl => true
            ssl_certificate_verification => true
            cacert => "${CERTS_DIR}/ca/ca.crt"
            hosts => ["https://es01:9200","https://es02:9200"]
            ilm_enabled => true
            ilm_rollover_alias => "pd-access"
            ilm_policy => "ping-2-day-retention"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
    if([log_type] == "PD_Failed_Ops"){
        elasticsearch {
            id => "pd_failed_ops_out"
            ssl => true
            ssl_certificate_verification => true
            cacert => "${CERTS_DIR}/ca/ca.crt"
            hosts => ["https://es01:9200","https://es02:9200"]
            ilm_enabled => true
            ilm_rollover_alias => "pd-failed-ops"
            ilm_policy => "ping-2-day-retention"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
    if([log_type] == "PF_System_Log"){
        elasticsearch {
            id => "pf_system_out"
            ssl => true
            ssl_certificate_verification => true
            cacert => "${CERTS_DIR}/ca/ca.crt"
            hosts => ["https://es01:9200","https://es02:9200"]
            ilm_enabled => true
            ilm_rollover_alias => "pf-system"
            ilm_policy => "ping-2-day-retention"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
    if([log_type] == "PA_System_Log"){
        elasticsearch {
            id => "pa_system_out"
            ssl => true
            ssl_certificate_verification => true
            cacert => "${CERTS_DIR}/ca/ca.crt"
            hosts => ["https://es01:9200","https://es02:9200"]
            ilm_enabled => true
            ilm_rollover_alias => "pa-system"
            ilm_policy => "ping-2-day-retention"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    } 
    if([log_type] == "PA_Audit_Log"){
        elasticsearch {
            id => "pa_audit_out"
            ssl => true
            ssl_certificate_verification => true
            cacert => "${CERTS_DIR}/ca/ca.crt"
            hosts => ["https://es01:9200","https://es02:9200"]
            ilm_enabled => true
            ilm_rollover_alias => "pa-audit"
            ilm_policy => "ping-2-day-retention"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
}
